
Signed integer computation

1. What is the largest value representable in 16-bit signed format? Smallest?
2. What is the result of the third computation? Why?
3. Why does the fourth computation overflow, but not the fifth?
4. If you were to start at 0, and increment repeatedly (add 1), what pattern would you see (in signed mode)?

Unsigned integer computation

1. What is the largest value representable in 16-bit unsigned format? Smallest?
2. What result do you get from the first computation? Why?
3. Why doesn't the second or third computation overflow?
4. If you were to start at 0, and increment repeatedly (add 1), what pattern would you see (in unsigned mode)?
5. What are the advantages and disadvantages of unsigned formats (compared to signed formats)?


Bitwise logic

1. What are computations 1-3 doing? (what does a function that computes f(x) = x & 1 do?)
2. What are computations 4-6 doing? (hint: suppose each of the 16 bits bit represents a light switch that is either on or off)
3. Continuing with the a light switch (or similar) analogy, what is computation 7 doing?
4. Why does computation 8 produce a nonzero result, but computation 9 produces zero?
5. What is computation 10 doing? (what does a function that computes f(x) = x & ~1 do?)
6. Compare the results of computation 11 and 12. Can you explain?


Bit shifting

1. Looking at the results from computations 1-5, do you see a pattern? What's going on? What does the left-shift operation effectively do?
2. Given this definition of “<<”, is the result from computation #6 what you would expect? What's happening?
3. Why is the result from computation #7 negative?
4. Looking at the results from computations 8-11, what does the right-shift operation effectively do? (Hint: Try doing integer divisions with the same divisor)
5. Thinking of the right-shift operation as a shift operation, there's a simple explanation for why the result of computation 12 is 0. What is it? (Hint: how does a computer encode decimal 10 in signed 16-bit?)


--------------------------

Additional problems

Completion of these additional problems is not required for lab2 credit. However, problems similar to these may show up in a future exam.


Multiplication, division, modulus

1. What result do you get in the second and third computations? Why?
2. What results do you get from computations 4-7? Why? (Hint: can signed 16-bit encoding represent fractions?)
3. Does the result from computations 4-7 get rounded to the nearest integer? If not, what actually happens? Where might this behavior be useful? (Hint: what if you wanted to divide 11 candies between 3 people?)
4. What does the modulus operator do for positive integers?
5. What happens when you divide by 0? Modulus with 0? What happens to the binary-calculator program? Why might this be a good thing? (Hint: remember the discussion introduction?)
6. Excluding division by 0, characterize the behavior of the modulus operation for positive and negative divisors and dividends (for a total of 2x2 = 4 combinations).


Floating point

1. Why is there an error in the fourth computation, but not the third? (Hint: how do you encode 0.25 and 0.3 in floating point?)
2. How does the result of the fifth computation compare to the fourth? Explain. (Hint: look at the hex representations of the results. How does the floating point format handle negative numbers?)
3. Mathematically, would you expect the same results in computations 6 and 7? Do you observe this result experimentally? Explain. (Hint: try stepping through each computation)
4. What happens if you try computation 6 in double-precision (64-bit) floating-point mode? Why?
5. Why is there noticeable error in computation 8, but not 9? (Hint: think of multiplying floating point numbers like multiplying two numbers in scientific notation, how do you do it?)
6. The root cause of the Ariane 5 rocket failure was isolated to the conversion of a floating point number, which stored the horizontal component of the rocket's velocity, to a 16-bit signed integer. What is the most likely cause of the failure? (Hint: this wasn't some small rounding error, the computed velocity was way off, causing the system to go haywire)


